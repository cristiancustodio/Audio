@page "/audiometers"

<MudContainer MaxWidth="MaxWidth.Large" Class="py-8">
    <MudPaper Class="pa-8" Elevation="8" Style="border-radius: 16px;">
        <!-- Header Section -->
        <MudStack Spacing="2" Class="mb-6">
            <MudIcon Icon="@Icons.Material.Filled.Hearing" Size="Size.Large" Color="Color.Primary"
                Class="align-self-center" />
            <MudText Typo="Typo.h4" Align="Align.Center" Color="Color.Primary" Class="fw-bold">
                Gerenciamento de Audiômetros
            </MudText>
            <MudText Typo="Typo.body1" Align="Align.Center" Color="Color.Secondary" Class="mb-4">
                Controle e manutenção dos audiômetros do sistema
            </MudText>
            <MudDivider />
        </MudStack>

        <!-- Action Button -->
        <MudStack Row Justify="Justify.Center" Class="mb-6">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large"
                StartIcon="@Icons.Material.Filled.Add" OnClick="OpenCreateDialog" Class="px-6">
                Novo Audiômetro
            </MudButton>
        </MudStack>

        <!-- Audiometers List -->
        <MudGrid Spacing="4">
            @foreach (var audiometer in audiometers)
            {
                <MudItem xs="12" md="6">
                    <MudCard Class="pa-4" Elevation="4" Style="border-radius: 12px;">
                        <MudStack Spacing="3">
                            <!-- Header do Card -->
                            <MudStack Row Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
                                <MudStack Row AlignItems="AlignItems.Center" Spacing="2">
                                    <MudIcon Icon="@Icons.Material.Filled.Hearing" Color="Color.Primary"
                                        Size="Size.Medium" />
                                    <MudText Typo="Typo.h6" Class="fw-bold">
                                        @audiometer.Description
                                    </MudText>
                                </MudStack>

                                <!-- Ações -->
                                <MudButtonGroup Variant="Variant.Text" Size="Size.Small">
                                    <MudIconButton Icon="@Icons.Material.Filled.Edit" Color="Color.Warning" Title="Editar"
                                        OnClick="() => EditAudiometer(audiometer)" />
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Title="Excluir"
                                        OnClick="() => DeleteAudiometer(audiometer)" />
                                </MudButtonGroup>
                            </MudStack>

                            <MudDivider />

                            <!-- Informações -->
                            <MudGrid Spacing="2">
                                <MudItem xs="6">
                                    <MudStack Spacing="1">
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            <MudIcon Icon="@Icons.Material.Filled.BuildCircle" Size="Size.Small"
                                                Class="mr-1" />
                                            Calibração
                                        </MudText>
                                        @if (audiometer.CalibrationDate.HasValue)
                                        {
                                            <MudText Typo="Typo.body2" Class="fw-bold">
                                                @audiometer.CalibrationDate.Value.ToString("dd/MM/yyyy")
                                            </MudText>
                                            <MudText Typo="Typo.caption"
                                                Color="@GetDateStatusColor(audiometer.CalibrationDate.Value)">
                                                @GetDateStatus(audiometer.CalibrationDate.Value)
                                            </MudText>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.body2" Color="Color.Warning">
                                                Não informado
                                            </MudText>
                                        }
                                    </MudStack>
                                </MudItem>

                                <MudItem xs="6">
                                    <MudStack Spacing="1">
                                        <MudText Typo="Typo.caption" Color="Color.Secondary">
                                            <MudIcon Icon="@Icons.Material.Filled.FactCheck" Size="Size.Small"
                                                Class="mr-1" />
                                            Aferição
                                        </MudText>
                                        @if (audiometer.MeasurementDate.HasValue)
                                        {
                                            <MudText Typo="Typo.body2" Class="fw-bold">
                                                @audiometer.MeasurementDate.Value.ToString("dd/MM/yyyy")
                                            </MudText>
                                            <MudText Typo="Typo.caption"
                                                Color="@GetDateStatusColor(audiometer.MeasurementDate.Value)">
                                                @GetDateStatus(audiometer.MeasurementDate.Value)
                                            </MudText>
                                        }
                                        else
                                        {
                                            <MudText Typo="Typo.body2" Color="Color.Warning">
                                                Não informado
                                            </MudText>
                                        }
                                    </MudStack>
                                </MudItem>
                            </MudGrid>

                            <!-- Status Geral -->
                            <MudChip T="string" Text="@GetOverallStatus(audiometer)"
                                Color="@GetOverallStatusColor(audiometer)" Size="Size.Small"
                                Style="align-self: flex-start;" />
                        </MudStack>
                    </MudCard>
                </MudItem>
            }
        </MudGrid>

        <!-- Empty State -->
        @if (!audiometers.Any())
        {
            <MudStack AlignItems="AlignItems.Center" Spacing="4" Class="pa-8">
                <MudIcon Icon="@Icons.Material.Filled.HearingDisabled" Size="Size.Large" Color="Color.Secondary" />
                <MudText Typo="Typo.h6" Color="Color.Secondary">Nenhum audiômetro cadastrado</MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center">
                    Cadastre o primeiro audiômetro para começar o controle de calibração e aferição
                </MudText>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                    OnClick="OpenCreateDialog">
                    Cadastrar Primeiro Audiômetro
                </MudButton>
            </MudStack>
        }

        <!-- Footer Info -->
        <MudStack Row Justify="Justify.Center" Class="mt-6">
            <MudText Typo="Typo.caption" Color="Color.Tertiary" Align="Align.Center">
                <MudIcon Icon="@Icons.Material.Filled.Info" Size="Size.Small" Class="mr-2" />
                Última atualização: @DateTime.Now.ToString("dd/MM/yyyy HH:mm")
            </MudText>
        </MudStack>
    </MudPaper>
</MudContainer>

<!-- Create/Edit Dialog -->
<MudDialog @bind-IsVisible="showDialog"
    Options="@(new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseOnEscapeKey = true })">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@(isEditing? Icons.Material.Filled.Edit : Icons.Material.Filled.Add)" Class="mr-3" />
            @(isEditing ? "Editar Audiômetro" : "Novo Audiômetro")
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudForm @ref="form" @onsubmit="SaveAudiometer">
            <MudStack Spacing="4">
                <MudTextField T="string" @bind-Value="currentAudiometer.Description" Label="Descrição do Audiômetro"
                    Required="true" RequiredError="A descrição é obrigatória" Counter="40" MaxLength="40"
                    Variant="Variant.Outlined" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Label"
                    HelperText="Máximo 40 caracteres" />

                <MudDatePicker @bind-Date="currentAudiometer.CalibrationDate" Label="Data de Calibração"
                    Variant="Variant.Outlined" Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.BuildCircle" HelperText="Data da última calibração"
                    MaxDate="DateTime.Today" />

                <MudDatePicker @bind-Date="currentAudiometer.MeasurementDate" Label="Data de Aferição"
                    Variant="Variant.Outlined" Adornment="Adornment.Start"
                    AdornmentIcon="@Icons.Material.Filled.FactCheck" HelperText="Data da última aferição"
                    MaxDate="DateTime.Today" />
            </MudStack>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDialog" Variant="Variant.Text" Color="Color.Secondary">
            Cancelar
        </MudButton>
        <MudButton OnClick="SaveAudiometer" Variant="Variant.Filled" Color="Color.Primary"
            StartIcon="@Icons.Material.Filled.Save">
            @(isEditing ? "Atualizar" : "Salvar")
        </MudButton>
    </DialogActions>
</MudDialog>

<!-- Delete Confirmation Dialog -->
<MudDialog @bind-IsVisible="showDeleteDialog" Options="@(new DialogOptions { MaxWidth = MaxWidth.Small })">
    <TitleContent>
        <MudText Typo="Typo.h6" Color="Color.Error">
            <MudIcon Icon="@Icons.Material.Filled.Warning" Class="mr-3" />
            Confirmar Exclusão
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudText>
            Tem certeza que deseja excluir o audiômetro <strong>@audiometerToDelete?.Description</strong>?
        </MudText>
        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-2">
            Esta ação não pode ser desfeita.
        </MudText>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="CloseDeleteDialog" Variant="Variant.Text">
            Cancelar
        </MudButton>
        <MudButton OnClick="ConfirmDelete" Variant="Variant.Filled" Color="Color.Error"
            StartIcon="@Icons.Material.Filled.Delete">
            Excluir
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    private List<AudiometerModel> audiometers = new();
    private AudiometerModel currentAudiometer = new();
    private AudiometerModel? audiometerToDelete;
    private MudForm form;
    private bool showDialog = false;
    private bool showDeleteDialog = false;
    private bool isEditing = false;

    public class AudiometerModel
    {
        public int Id { get; set; }
        public string Description { get; set; } = string.Empty;
        public DateTime? CalibrationDate { get; set; }
        public DateTime? MeasurementDate { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadSampleData();
    }

    private async Task LoadSampleData()
    {
        // Dados de exemplo
        audiometers = new List<AudiometerModel>
{
new() {
Id = 1,
Description = "Audiômetro Principal - Sala 1",
CalibrationDate = new DateTime(2024, 1, 15),
MeasurementDate = new DateTime(2024, 3, 10)
},
new() {
Id = 2,
Description = "Audiômetro Secundário - Sala 2",
CalibrationDate = new DateTime(2023, 11, 20),
MeasurementDate = new DateTime(2024, 2, 5)
}
};
    }

    private void OpenCreateDialog()
    {
        currentAudiometer = new AudiometerModel();
        isEditing = false;
        showDialog = true;
    }

    private void EditAudiometer(AudiometerModel audiometer)
    {
        currentAudiometer = new AudiometerModel
        {
            Id = audiometer.Id,
            Description = audiometer.Description,
            CalibrationDate = audiometer.CalibrationDate,
            MeasurementDate = audiometer.MeasurementDate
        };
        isEditing = true;
        showDialog = true;
    }

    private void DeleteAudiometer(AudiometerModel audiometer)
    {
        audiometerToDelete = audiometer;
        showDeleteDialog = true;
    }

    private async Task SaveAudiometer()
    {
        await form.Validate();

        if (!form.IsValid) return;

        if (isEditing)
        {
            var index = audiometers.FindIndex(a => a.Id == currentAudiometer.Id);
            if (index >= 0)
                audiometers[index] = currentAudiometer;
        }
        else
        {
            currentAudiometer.Id = audiometers.Any() ? audiometers.Max(a => a.Id) + 1 : 1;
            audiometers.Add(currentAudiometer);
        }

        CloseDialog();
        StateHasChanged();
    }

    private void ConfirmDelete()
    {
        if (audiometerToDelete != null)
        {
            audiometers.Remove(audiometerToDelete);
            CloseDeleteDialog();
            StateHasChanged();
        }
    }

    private void CloseDialog()
    {
        showDialog = false;
        currentAudiometer = new();
    }

    private void CloseDeleteDialog()
    {
        showDeleteDialog = false;
        audiometerToDelete = null;
    }


}