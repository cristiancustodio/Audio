@using Microsoft.AspNetCore.Components

<MudPaper Class="pa-4 ma-2" Style="@GetPaperStyle()" title="@Tooltip" Elevation="2">
    <div class="d-flex align-center">
        <MudAvatar Color="@GetAvatarColor()" Variant="Variant.Filled" Size="Size.Large" Class="mr-4">
            <MudIcon Icon="@Icon" />
        </MudAvatar>
        <div class="flex-grow-1">
            <MudText Typo="Typo.subtitle2" Class="mb-1">@Title</MudText>
            <MudText Typo="Typo.h6" Class="font-weight-bold">@Value</MudText>
        </div>
    </div>
</MudPaper>

@code {
    [Parameter] public required string Title { get; set; }
    [Parameter] public required object Value { get; set; }
    [Parameter] public required string Icon { get; set; }
    [Parameter] public required string Tooltip { get; set; }
    [Parameter] public required string Color { get; set; } = "primary";

    private string GetPaperStyle()
    {
        var colorMap = new Dictionary<string, string>
        {
            { "primary", "background: linear-gradient(45deg, var(--mud-palette-primary), var(--mud-palette-primary-lighten));" },
            { "secondary", "background: linear-gradient(45deg, var(--mud-palette-secondary), var(--mud-palette-secondary-lighten));" },
            { "success", "background: linear-gradient(45deg, var(--mud-palette-success), var(--mud-palette-success-lighten));" },
            { "info", "background: linear-gradient(45deg, var(--mud-palette-info), var(--mud-palette-info-lighten));" },
            { "warning", "background: linear-gradient(45deg, var(--mud-palette-warning), var(--mud-palette-warning-lighten));" },
            { "error", "background: linear-gradient(45deg, var(--mud-palette-error), var(--mud-palette-error-lighten));" }
        };

        return colorMap.ContainsKey(Color.ToLower()) 
            ? colorMap[Color.ToLower()] + " color: white;" 
            : "background: linear-gradient(45deg, var(--mud-palette-primary), var(--mud-palette-primary-lighten)); color: white;";
    }

    private MudBlazor.Color GetAvatarColor()
    {
        return Color.ToLower() switch
        {
            "primary" => MudBlazor.Color.Primary,
            "secondary" => MudBlazor.Color.Secondary,
            "success" => MudBlazor.Color.Success,
            "info" => MudBlazor.Color.Info,
            "warning" => MudBlazor.Color.Warning,
            "error" => MudBlazor.Color.Error,
            _ => MudBlazor.Color.Primary
        };
    }

    @* private string GetMudIcon()
    {
        // Mapeamento comum de Ã­cones para MudBlazor Icons
        var iconMap = new Dictionary<string, string>
        {
            { "dashboard.png", Icons.Material.Filled.Dashboard },
            { "users.png", Icons.Material.Filled.People },
            { "sales.png", Icons.Material.Filled.AttachMoney },
            { "orders.png", Icons.Material.Filled.ShoppingCart },
            { "revenue.png", Icons.Material.Filled.TrendingUp },
            { "analytics.png", Icons.Material.Filled.Analytics },
            { "chart.png", Icons.Material.Filled.BarChart },
            { "growth.png", Icons.Material.Filled.TrendingUp },
            { "calendar.png", Icons.Material.Filled.CalendarToday },
            { "settings.png", Icons.Material.Filled.Settings }
        };

        return iconMap.ContainsKey(Icon) 
            ? iconMap[Icon] 
            : Icons.Material.Filled.Info;
    } *@
}